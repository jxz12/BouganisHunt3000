// ----------------------------------------------------------------------
//  HLS HDL:        Verilog Netlister
//  HLS Version:    2011a.126 Production Release
//  HLS Date:       Wed Aug  8 00:52:07 PDT 2012
// 
//  Generated by:   jxz12@EEWS104A-020
//  Generated date: Mon May 13 11:21:41 2013
// ----------------------------------------------------------------------

// 
// ------------------------------------------------------------------
//  Design Unit:    ps_engine_core_fsm
//  FSM Module
// ------------------------------------------------------------------


module ps_engine_core_fsm (
  clk, en, arst_n, fsm_output
);
  input clk;
  input en;
  input arst_n;
  output [1:0] fsm_output;
  reg [1:0] fsm_output;


  // FSM State Type Declaration for ps_engine_core_fsm_1
  parameter
    st_main = 1'd0,
    st_main_1 = 1'd1,
    state_x = 1'b0;

  reg [0:0] state_var;
  reg [0:0] state_var_NS;


  // Interconnect Declarations for Component Instantiations 
  always @(*)
  begin : ps_engine_core_fsm_1
    case (state_var)
      st_main : begin
        fsm_output = 2'b1;
        state_var_NS = st_main_1;
      end
      st_main_1 : begin
        fsm_output = 2'b10;
        state_var_NS = st_main;
      end
      default : begin
        fsm_output = 2'b00;
        state_var_NS = st_main;
      end
    endcase
  end

  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      state_var <= st_main;
    end
    else if ( en ) begin
      state_var <= state_var_NS;
    end
  end

endmodule

// ------------------------------------------------------------------
//  Design Unit:    ps_engine_core
// ------------------------------------------------------------------


module ps_engine_core (
  clk, en, arst_n, crosshair_x_rsc_mgc_in_wire_d, crosshair_y_rsc_mgc_in_wire_d,
      shot_attempted_rsc_mgc_in_wire_d, shot_timer_rsc_mgc_out_stdreg_d, target_x_out_rsc_mgc_out_stdreg_d,
      target_shot_rsc_mgc_out_stdreg_d, score_out_rsc_mgc_out_stdreg_d, life_out_rsc_mgc_out_stdreg_d
);
  input clk;
  input en;
  input arst_n;
  input [9:0] crosshair_x_rsc_mgc_in_wire_d;
  input [9:0] crosshair_y_rsc_mgc_in_wire_d;
  input shot_attempted_rsc_mgc_in_wire_d;
  output [1:0] shot_timer_rsc_mgc_out_stdreg_d;
  reg [1:0] shot_timer_rsc_mgc_out_stdreg_d;
  output [9:0] target_x_out_rsc_mgc_out_stdreg_d;
  reg [9:0] target_x_out_rsc_mgc_out_stdreg_d;
  output target_shot_rsc_mgc_out_stdreg_d;
  reg target_shot_rsc_mgc_out_stdreg_d;
  output [9:0] score_out_rsc_mgc_out_stdreg_d;
  reg [9:0] score_out_rsc_mgc_out_stdreg_d;
  output [1:0] life_out_rsc_mgc_out_stdreg_d;
  reg [1:0] life_out_rsc_mgc_out_stdreg_d;


  // Interconnect Declarations
  wire [1:0] fsm_output;
  wire or_1_tmp;
  wire or_tmp;
  wire or_2_tmp;
  wire or_dcpl_3;
  wire or_dcpl_4;
  wire or_dcpl_23;
  wire not_tmp_5;
  reg [9:0] time_counter_sva;
  reg [9:0] fire_rate_counter_sva;
  reg [3:0] target_state_counter_1_sva;
  reg [1:0] target_platform_sva;
  reg [9:0] target_timer_sva;
  reg [2:0] target_x_sg1_1_sva;
  reg target_y_sg1_sva;
  reg target_y_sg3_sva;
  reg [9:0] score_sva;
  reg [1:0] misses_sva;
  wire [3:0] target_state_counter_1_sva_dfm_1;
  wire or_5_cse;
  wire or_14_cse;
  wire and_9_m1c;
  wire [5:0] else_1_else_if_acc_8_itm;
  wire [6:0] nl_else_1_else_if_acc_8_itm;
  wire [6:0] else_1_else_if_acc_11_itm;
  wire [7:0] nl_else_1_else_if_acc_11_itm;
  wire [4:0] else_1_else_if_acc_4_itm;
  wire [6:0] nl_else_1_else_if_acc_4_itm;
  wire [5:0] else_1_else_if_acc_9_itm;
  wire [6:0] nl_else_1_else_if_acc_9_itm;
  wire [3:0] if_1_acc_1_itm;
  wire [4:0] nl_if_1_acc_1_itm;
  wire else_1_else_land_lpi_1_dfm;
  wire [9:0] score_sva_1;
  wire [10:0] nl_score_sva_1;
  wire and_4_cse;
  wire [9:0] fire_rate_counter_sva_dfm_1_mx0w0;
  wire [2:0] acc_imod_3_sva;
  wire [3:0] nl_acc_imod_3_sva;
  wire [3:0] acc_7_psp_sva;
  wire [4:0] nl_acc_7_psp_sva;
  wire [19:0] mul_idiv_sva;
  wire [39:0] nl_mul_idiv_sva;
  wire [9:0] time_counter_sva_1;
  wire [10:0] nl_time_counter_sva_1;
  wire [1:0] misses_sva_1;
  wire [2:0] nl_misses_sva_1;
  wire [2:0] acc_13_psp_sva;
  wire [3:0] nl_acc_13_psp_sva;
  wire [1:0] asn_201_mx0w0;
  wire [2:0] nl_asn_201_mx0w0;
  wire [1:0] target_platform_sva_dfm_1_mx0;
  wire [9:0] target_timer_sva_2;
  wire [10:0] nl_target_timer_sva_2;
  wire [8:0] conc_idiv_sg1_sva;
  wire [9:0] nl_conc_idiv_sg1_sva;
  wire [4:0] acc_imod_sva;
  wire [5:0] nl_acc_imod_sva;
  wire [2:0] else_1_if_acc_14_itm;
  wire [3:0] nl_else_1_if_acc_14_itm;

  wire[3:0] else_1_else_mux_1_nl;
  wire[9:0] mux_23_nl;

  // Interconnect Declarations for Component Instantiations 
  ps_engine_core_fsm ps_engine_core_fsm_inst (
      .clk(clk),
      .en(en),
      .arst_n(arst_n),
      .fsm_output(fsm_output)
    );
  assign or_14_cse = (~ shot_attempted_rsc_mgc_in_wire_d) | or_dcpl_4 | or_dcpl_3
      | (~ (else_1_else_if_acc_4_itm[4])) | (else_1_else_if_acc_11_itm[6]) | (~ (else_1_else_if_acc_8_itm[5]))
      | (target_state_counter_1_sva[0]);
  assign and_9_m1c = (fsm_output[0]) & or_2_tmp;
  assign else_1_else_land_lpi_1_dfm = (else_1_else_if_acc_8_itm[5]) & (~ (else_1_else_if_acc_11_itm[6]))
      & (else_1_else_if_acc_4_itm[4]) & (~ (else_1_else_if_acc_9_itm[5])) & and_4_cse;
  assign else_1_else_mux_1_nl = MUX_v_4_2_2({target_state_counter_1_sva , 4'b1010},
      else_1_else_land_lpi_1_dfm);
  assign target_state_counter_1_sva_dfm_1 = (else_1_else_mux_1_nl) & (signext_4_1(~
      (target_state_counter_1_sva[0])));
  assign nl_score_sva_1 = score_sva + 10'b1;
  assign score_sva_1 = nl_score_sva_1[9:0];
  assign nl_else_1_else_if_acc_8_itm = conv_s2u_5_6({1'b1 , (conv_u2u_3_4({(~ target_y_sg3_sva)
      , 1'b1 , (~ target_y_sg1_sva)}) + 4'b101)}) + conv_u2u_5_6(crosshair_y_rsc_mgc_in_wire_d[9:5]);
  assign else_1_else_if_acc_8_itm = nl_else_1_else_if_acc_8_itm[5:0];
  assign nl_else_1_else_if_acc_11_itm = ({1'b1 , (crosshair_y_rsc_mgc_in_wire_d[9:5])
      , 1'b1}) + conv_u2u_6_7({2'b11 , (~ target_y_sg3_sva) , 1'b1 , (~ target_y_sg1_sva)
      , 1'b1});
  assign else_1_else_if_acc_11_itm = nl_else_1_else_if_acc_11_itm[6:0];
  assign nl_else_1_else_if_acc_4_itm = (conv_u2u_4_5(crosshair_x_rsc_mgc_in_wire_d[9:6])
      + conv_u2u_4_5({1'b1 , (~ target_x_sg1_1_sva)})) + 5'b1111;
  assign else_1_else_if_acc_4_itm = nl_else_1_else_if_acc_4_itm[4:0];
  assign and_4_cse = shot_attempted_rsc_mgc_in_wire_d & (~ or_tmp);
  assign nl_else_1_else_if_acc_9_itm = ({1'b1 , (crosshair_x_rsc_mgc_in_wire_d[9:6])
      , 1'b1}) + conv_u2u_5_6({1'b1 , (~ target_x_sg1_1_sva) , 1'b1});
  assign else_1_else_if_acc_9_itm = nl_else_1_else_if_acc_9_itm[5:0];
  assign fire_rate_counter_sva_dfm_1_mx0w0 = MUX1HOT_v_10_3_2({fire_rate_counter_sva
      , 10'b1111 , (fire_rate_counter_sva + 10'b1111111111)}, {(~(shot_attempted_rsc_mgc_in_wire_d
      | or_tmp)) , and_4_cse , or_tmp});
  assign nl_else_1_if_acc_14_itm = ({1'b1 , (acc_imod_3_sva[0]) , 1'b1}) + conv_u2s_2_3({(~
      (acc_imod_3_sva[1])) , (~ (acc_imod_3_sva[2]))});
  assign else_1_if_acc_14_itm = nl_else_1_if_acc_14_itm[2:0];
  assign nl_acc_imod_3_sva = conv_s2s_2_3(conv_s2s_1_2(acc_7_psp_sva[1]) + conv_u2s_1_2(acc_7_psp_sva[0]))
      + conv_s2s_2_3(acc_7_psp_sva[3:2]);
  assign acc_imod_3_sva = nl_acc_imod_3_sva[2:0];
  assign nl_acc_7_psp_sva = (readslicef_5_4_1((conv_u2u_4_5({(readslicef_4_3_1((conv_u2u_3_4({(readslicef_3_2_1((conv_u2u_2_3({(mul_idiv_sva[2])
      , 1'b1}) + conv_u2u_2_3({(~ (mul_idiv_sva[3])) , 1'b1})))) , 1'b1}) + conv_u2u_3_4({(readslicef_3_2_1((conv_u2u_2_3({(mul_idiv_sva[4])
      , 1'b1}) + conv_u2u_2_3({(~ (mul_idiv_sva[5])) , 1'b1})))) , (~ (mul_idiv_sva[17]))}))))
      , 1'b1}) + conv_u2u_4_5({(readslicef_4_3_1((conv_u2u_3_4({(readslicef_3_2_1((conv_u2u_2_3({(mul_idiv_sva[6])
      , 1'b1}) + conv_u2u_2_3({(~ (mul_idiv_sva[7])) , 1'b1})))) , 1'b1}) + conv_u2u_3_4({(readslicef_3_2_1((conv_u2u_2_3({(mul_idiv_sva[8])
      , 1'b1}) + conv_u2u_2_3({(~ (mul_idiv_sva[9])) , 1'b1})))) , (mul_idiv_sva[16])}))))
      , (~ (mul_idiv_sva[19]))})))) + (readslicef_5_4_1((conv_u2u_4_5({(readslicef_4_3_1((conv_u2u_3_4({(readslicef_3_2_1((conv_u2u_2_3({(mul_idiv_sva[10])
      , 1'b1}) + conv_u2u_2_3({(~ (mul_idiv_sva[11])) , 1'b1})))) , 1'b1}) + conv_u2u_3_4({(readslicef_3_2_1((conv_u2u_2_3({(mul_idiv_sva[12])
      , 1'b1}) + conv_u2u_2_3({(~ (mul_idiv_sva[13])) , 1'b1})))) , (~ (mul_idiv_sva[15]))}))))
      , 1'b1}) + conv_u2u_3_5({(readslicef_3_2_1((conv_u2u_2_3({(mul_idiv_sva[0])
      , 1'b1}) + conv_u2u_2_3({(~ (mul_idiv_sva[1])) , (mul_idiv_sva[14])})))) ,
      (mul_idiv_sva[18])}))));
  assign acc_7_psp_sva = nl_acc_7_psp_sva[3:0];
  assign nl_mul_idiv_sva = 20'b1111100101 * conv_u2u_10_20(time_counter_sva_1);
  assign mul_idiv_sva = nl_mul_idiv_sva[19:0];
  assign nl_time_counter_sva_1 = time_counter_sva + 10'b1;
  assign time_counter_sva_1 = nl_time_counter_sva_1[9:0];
  assign nl_misses_sva_1 = misses_sva + 2'b1;
  assign misses_sva_1 = nl_misses_sva_1[1:0];
  assign or_1_tmp = (target_timer_sva_2[9]) | (target_timer_sva_2[8]) | (target_timer_sva_2[7])
      | (target_timer_sva_2[6]) | (target_timer_sva_2[5]) | (target_timer_sva_2[4])
      | (target_timer_sva_2[3]) | (target_timer_sva_2[2]) | (target_timer_sva_2[1])
      | (target_timer_sva_2[0]);
  assign nl_acc_13_psp_sva = conv_u2u_2_3(target_platform_sva_dfm_1_mx0) + ({target_platform_sva_dfm_1_mx0
      , 1'b1});
  assign acc_13_psp_sva = nl_acc_13_psp_sva[2:0];
  assign nl_asn_201_mx0w0 = conv_u2u_1_2(else_1_if_acc_14_itm[1]) + conv_u2u_1_2(else_1_if_acc_14_itm[2]);
  assign asn_201_mx0w0 = nl_asn_201_mx0w0[1:0];
  assign target_platform_sva_dfm_1_mx0 = MUX_v_2_2_2({asn_201_mx0w0 , target_platform_sva},
      not_tmp_5);
  assign mux_23_nl = MUX_v_10_2_2({10'b1100100 , target_timer_sva}, not_tmp_5);
  assign nl_target_timer_sva_2 = (mux_23_nl) + 10'b1111111111;
  assign target_timer_sva_2 = nl_target_timer_sva_2[9:0];
  assign or_2_tmp = else_1_else_land_lpi_1_dfm | (target_state_counter_1_sva[0])
      | (if_1_acc_1_itm[3]);
  assign nl_if_1_acc_1_itm = ({1'b1 , (~ (target_state_counter_1_sva[3:1]))}) + 4'b1;
  assign if_1_acc_1_itm = nl_if_1_acc_1_itm[3:0];
  assign nl_conc_idiv_sg1_sva = conv_u2u_8_9(fire_rate_counter_sva_dfm_1_mx0w0[9:2])
      + 9'b1;
  assign conc_idiv_sg1_sva = nl_conc_idiv_sg1_sva[8:0];
  assign nl_acc_imod_sva = conv_u2s_4_5(conv_u2u_3_4(readslicef_4_3_1((conv_u2u_3_4({(~
      (conc_idiv_sg1_sva[1:0])) , 1'b1}) + conv_u2u_3_4({(conc_idiv_sg1_sva[3:2])
      , (~ (conc_idiv_sg1_sva[8]))})))) + conv_u2u_3_4(readslicef_4_3_1((conv_u2u_3_4({(~
      (conc_idiv_sg1_sva[5:4])) , 1'b1}) + conv_u2u_3_4({(conc_idiv_sg1_sva[7:6])
      , 1'b1}))))) + conv_s2s_4_5({2'b10 , (fire_rate_counter_sva_dfm_1_mx0w0[1:0])});
  assign acc_imod_sva = nl_acc_imod_sva[4:0];
  assign or_tmp = (fire_rate_counter_sva[9]) | (fire_rate_counter_sva[8]) | (fire_rate_counter_sva[7])
      | (fire_rate_counter_sva[6]) | (fire_rate_counter_sva[5]) | (fire_rate_counter_sva[4])
      | (fire_rate_counter_sva[3]) | (fire_rate_counter_sva[2]) | (fire_rate_counter_sva[1])
      | (fire_rate_counter_sva[0]);
  assign or_5_cse = or_1_tmp | or_2_tmp;
  assign or_dcpl_3 = or_tmp | (else_1_else_if_acc_9_itm[5]);
  assign or_dcpl_4 = (~ (fsm_output[0])) | (if_1_acc_1_itm[3]);
  assign or_dcpl_23 = (~ (fsm_output[0])) | or_2_tmp;
  assign not_tmp_5 = ~((target_state_counter_1_sva[0]) & (~ (if_1_acc_1_itm[3])));
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      score_out_rsc_mgc_out_stdreg_d <= 10'b0;
      target_shot_rsc_mgc_out_stdreg_d <= 1'b0;
      target_state_counter_1_sva <= 4'b0;
      score_sva <= 10'b0;
      target_y_sg3_sva <= 1'b0;
      target_y_sg1_sva <= 1'b0;
      target_x_sg1_1_sva <= 3'b0;
      fire_rate_counter_sva <= 10'b0;
      life_out_rsc_mgc_out_stdreg_d <= 2'b0;
      target_x_out_rsc_mgc_out_stdreg_d <= 10'b0;
      misses_sva <= 2'b0;
      shot_timer_rsc_mgc_out_stdreg_d <= 2'b0;
      target_timer_sva <= 10'b0;
      target_platform_sva <= 2'b0;
      time_counter_sva <= 10'b0;
    end
    else begin
      if ( en ) begin
        score_out_rsc_mgc_out_stdreg_d <= MUX_v_10_2_2({score_sva_1 , score_out_rsc_mgc_out_stdreg_d},
            or_14_cse);
        target_shot_rsc_mgc_out_stdreg_d <= MUX_s_1_2_2({(target_state_counter_1_sva_dfm_1[3])
            , target_shot_rsc_mgc_out_stdreg_d}, (~((~((~ shot_attempted_rsc_mgc_in_wire_d)
            | or_dcpl_3 | (~ (else_1_else_if_acc_4_itm[4])) | (else_1_else_if_acc_11_itm[6])
            | (~ (else_1_else_if_acc_8_itm[5])))) | (target_state_counter_1_sva[0])))
            | or_dcpl_4);
        target_state_counter_1_sva <= MUX1HOT_v_4_4_2({target_state_counter_1_sva
            , 4'b1 , target_state_counter_1_sva_dfm_1 , (target_state_counter_1_sva
            + 4'b1111)}, {(~ (fsm_output[0])) , ((~ or_5_cse) & (fsm_output[0]))
            , ((~ (if_1_acc_1_itm[3])) & or_5_cse & (fsm_output[0])) , ((if_1_acc_1_itm[3])
            & or_5_cse & (fsm_output[0]))});
        score_sva <= MUX_v_10_2_2({score_sva_1 , score_sva}, or_14_cse);
        target_y_sg3_sva <= MUX_s_1_2_2({target_y_sg3_sva , (target_y_sg3_sva | (~
            or_2_tmp))}, fsm_output[0]);
        target_y_sg1_sva <= MUX_s_1_2_2({target_y_sg1_sva , (target_y_sg1_sva | (~
            or_2_tmp))}, fsm_output[0]);
        target_x_sg1_1_sva <= MUX_v_3_2_2({acc_13_psp_sva , target_x_sg1_1_sva},
            or_dcpl_23);
        fire_rate_counter_sva <= MUX_v_10_2_2({fire_rate_counter_sva , fire_rate_counter_sva_dfm_1_mx0w0},
            fsm_output[0]);
        life_out_rsc_mgc_out_stdreg_d <= MUX_v_2_2_2({(~ (MUX_v_2_2_2({misses_sva_1
            , misses_sva}, or_1_tmp))) , life_out_rsc_mgc_out_stdreg_d}, or_dcpl_23);
        target_x_out_rsc_mgc_out_stdreg_d <= MUX_v_10_2_2({({1'b0 , acc_13_psp_sva
            , 6'b0}) , target_x_out_rsc_mgc_out_stdreg_d}, or_dcpl_23);
        misses_sva <= MUX_v_2_2_2({misses_sva_1 , misses_sva}, or_1_tmp | or_dcpl_23);
        shot_timer_rsc_mgc_out_stdreg_d <= MUX_v_2_2_2({shot_timer_rsc_mgc_out_stdreg_d
            , (readslicef_3_2_1((({(readslicef_3_2_1((({(readslicef_3_2_1((({(~ (conc_idiv_sg1_sva[7:6]))
            , 1'b1}) + ({(acc_imod_sva[3:2]) , 1'b1})))) , 1'b1}) + ({(conc_idiv_sg1_sva[1:0])
            , (acc_imod_sva[4])})))) , 1'b1}) + ({(readslicef_3_2_1((({(~ (conc_idiv_sg1_sva[3:2]))
            , 1'b1}) + ({(conc_idiv_sg1_sva[5:4]) , (conc_idiv_sg1_sva[8])})))) ,
            (~ (readslicef_4_1_3((({1'b1 , (acc_imod_sva[1:0]) , 1'b1}) + conv_u2s_3_4({(~
            (acc_imod_sva[3:2])) , (~ (acc_imod_sva[4]))})))))}))))}, fsm_output[0]);
        target_timer_sva <= MUX1HOT_v_10_3_2({10'b1100100 , target_timer_sva , target_timer_sva_2},
            {((~ not_tmp_5) & and_9_m1c) , (~((~(not_tmp_5 & and_9_m1c)) & (fsm_output[0])))
            , ((fsm_output[0]) & (~ or_2_tmp))});
        target_platform_sva <= MUX_v_2_2_2({asn_201_mx0w0 , target_platform_sva},
            not_tmp_5 | (~ (fsm_output[0])));
        time_counter_sva <= MUX_v_10_2_2({time_counter_sva , time_counter_sva_1},
            fsm_output[0]);
      end
    end
  end

  function [3:0] MUX_v_4_2_2;
    input [7:0] inputs;
    input [0:0] sel;
    reg [3:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = inputs[7:4];
      end
      1'b1 : begin
        result = inputs[3:0];
      end
      default : begin
        result = inputs[7:4];
      end
    endcase
    MUX_v_4_2_2 = result;
  end
  endfunction


  function [3:0] signext_4_1;
    input [0:0] vector;
  begin
    signext_4_1= {{3{vector[0]}}, vector};
  end
  endfunction


  function [9:0] MUX1HOT_v_10_3_2;
    input [29:0] inputs;
    input [2:0] sel;
    reg [9:0] result;
    integer i;
  begin
    result = inputs[0+:10] & {10{sel[0]}};
    for( i = 1; i < 3; i = i + 1 )
      result = result | (inputs[i*10+:10] & {10{sel[i]}});
    MUX1HOT_v_10_3_2 = result;
  end
  endfunction


  function [3:0] readslicef_5_4_1;
    input [4:0] vector;
    reg [4:0] tmp;
  begin
    tmp = vector >> 1;
    readslicef_5_4_1 = tmp[3:0];
  end
  endfunction


  function [2:0] readslicef_4_3_1;
    input [3:0] vector;
    reg [3:0] tmp;
  begin
    tmp = vector >> 1;
    readslicef_4_3_1 = tmp[2:0];
  end
  endfunction


  function [1:0] readslicef_3_2_1;
    input [2:0] vector;
    reg [2:0] tmp;
  begin
    tmp = vector >> 1;
    readslicef_3_2_1 = tmp[1:0];
  end
  endfunction


  function [1:0] MUX_v_2_2_2;
    input [3:0] inputs;
    input [0:0] sel;
    reg [1:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = inputs[3:2];
      end
      1'b1 : begin
        result = inputs[1:0];
      end
      default : begin
        result = inputs[3:2];
      end
    endcase
    MUX_v_2_2_2 = result;
  end
  endfunction


  function [9:0] MUX_v_10_2_2;
    input [19:0] inputs;
    input [0:0] sel;
    reg [9:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = inputs[19:10];
      end
      1'b1 : begin
        result = inputs[9:0];
      end
      default : begin
        result = inputs[19:10];
      end
    endcase
    MUX_v_10_2_2 = result;
  end
  endfunction


  function [0:0] MUX_s_1_2_2;
    input [1:0] inputs;
    input [0:0] sel;
    reg [0:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = inputs[1:1];
      end
      1'b1 : begin
        result = inputs[0:0];
      end
      default : begin
        result = inputs[1:1];
      end
    endcase
    MUX_s_1_2_2 = result;
  end
  endfunction


  function [3:0] MUX1HOT_v_4_4_2;
    input [15:0] inputs;
    input [3:0] sel;
    reg [3:0] result;
    integer i;
  begin
    result = inputs[0+:4] & {4{sel[0]}};
    for( i = 1; i < 4; i = i + 1 )
      result = result | (inputs[i*4+:4] & {4{sel[i]}});
    MUX1HOT_v_4_4_2 = result;
  end
  endfunction


  function [2:0] MUX_v_3_2_2;
    input [5:0] inputs;
    input [0:0] sel;
    reg [2:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = inputs[5:3];
      end
      1'b1 : begin
        result = inputs[2:0];
      end
      default : begin
        result = inputs[5:3];
      end
    endcase
    MUX_v_3_2_2 = result;
  end
  endfunction


  function [0:0] readslicef_4_1_3;
    input [3:0] vector;
    reg [3:0] tmp;
  begin
    tmp = vector >> 3;
    readslicef_4_1_3 = tmp[0:0];
  end
  endfunction


  function  [5:0] conv_s2u_5_6 ;
    input signed [4:0]  vector ;
  begin
    conv_s2u_5_6 = {vector[4], vector};
  end
  endfunction


  function  [3:0] conv_u2u_3_4 ;
    input [2:0]  vector ;
  begin
    conv_u2u_3_4 = {1'b0, vector};
  end
  endfunction


  function  [5:0] conv_u2u_5_6 ;
    input [4:0]  vector ;
  begin
    conv_u2u_5_6 = {1'b0, vector};
  end
  endfunction


  function  [6:0] conv_u2u_6_7 ;
    input [5:0]  vector ;
  begin
    conv_u2u_6_7 = {1'b0, vector};
  end
  endfunction


  function  [4:0] conv_u2u_4_5 ;
    input [3:0]  vector ;
  begin
    conv_u2u_4_5 = {1'b0, vector};
  end
  endfunction


  function signed [2:0] conv_u2s_2_3 ;
    input [1:0]  vector ;
  begin
    conv_u2s_2_3 = {1'b0, vector};
  end
  endfunction


  function signed [2:0] conv_s2s_2_3 ;
    input signed [1:0]  vector ;
  begin
    conv_s2s_2_3 = {vector[1], vector};
  end
  endfunction


  function signed [1:0] conv_s2s_1_2 ;
    input signed [0:0]  vector ;
  begin
    conv_s2s_1_2 = {vector[0], vector};
  end
  endfunction


  function signed [1:0] conv_u2s_1_2 ;
    input [0:0]  vector ;
  begin
    conv_u2s_1_2 = {1'b0, vector};
  end
  endfunction


  function  [2:0] conv_u2u_2_3 ;
    input [1:0]  vector ;
  begin
    conv_u2u_2_3 = {1'b0, vector};
  end
  endfunction


  function  [4:0] conv_u2u_3_5 ;
    input [2:0]  vector ;
  begin
    conv_u2u_3_5 = {{2{1'b0}}, vector};
  end
  endfunction


  function  [19:0] conv_u2u_10_20 ;
    input [9:0]  vector ;
  begin
    conv_u2u_10_20 = {{10{1'b0}}, vector};
  end
  endfunction


  function  [1:0] conv_u2u_1_2 ;
    input [0:0]  vector ;
  begin
    conv_u2u_1_2 = {1'b0, vector};
  end
  endfunction


  function  [8:0] conv_u2u_8_9 ;
    input [7:0]  vector ;
  begin
    conv_u2u_8_9 = {1'b0, vector};
  end
  endfunction


  function signed [4:0] conv_u2s_4_5 ;
    input [3:0]  vector ;
  begin
    conv_u2s_4_5 = {1'b0, vector};
  end
  endfunction


  function signed [4:0] conv_s2s_4_5 ;
    input signed [3:0]  vector ;
  begin
    conv_s2s_4_5 = {vector[3], vector};
  end
  endfunction


  function signed [3:0] conv_u2s_3_4 ;
    input [2:0]  vector ;
  begin
    conv_u2s_3_4 = {1'b0, vector};
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    ps_engine
//  Generated from file(s):
//    3) $PROJECT_HOME/PS_engine.cpp
// ------------------------------------------------------------------


module ps_engine (
  crosshair_x_rsc_z, crosshair_y_rsc_z, shot_attempted_rsc_z, shot_timer_rsc_z, target_x_out_rsc_z,
      target_y_out_rsc_z, target_shot_rsc_z, score_out_rsc_z, life_out_rsc_z, clk,
      en, arst_n
);
  input [9:0] crosshair_x_rsc_z;
  input [9:0] crosshair_y_rsc_z;
  input shot_attempted_rsc_z;
  output [1:0] shot_timer_rsc_z;
  output [9:0] target_x_out_rsc_z;
  output [9:0] target_y_out_rsc_z;
  output target_shot_rsc_z;
  output [9:0] score_out_rsc_z;
  output [1:0] life_out_rsc_z;
  input clk;
  input en;
  input arst_n;


  // Interconnect Declarations
  wire [9:0] crosshair_x_rsc_mgc_in_wire_d;
  wire [9:0] crosshair_y_rsc_mgc_in_wire_d;
  wire shot_attempted_rsc_mgc_in_wire_d;
  wire [1:0] shot_timer_rsc_mgc_out_stdreg_d;
  wire [9:0] target_x_out_rsc_mgc_out_stdreg_d;
  wire target_shot_rsc_mgc_out_stdreg_d;
  wire [9:0] score_out_rsc_mgc_out_stdreg_d;
  wire [1:0] life_out_rsc_mgc_out_stdreg_d;


  // Interconnect Declarations for Component Instantiations 
  mgc_in_wire #(.rscid(1),
  .width(10)) crosshair_x_rsc_mgc_in_wire (
      .d(crosshair_x_rsc_mgc_in_wire_d),
      .z(crosshair_x_rsc_z)
    );
  mgc_in_wire #(.rscid(2),
  .width(10)) crosshair_y_rsc_mgc_in_wire (
      .d(crosshair_y_rsc_mgc_in_wire_d),
      .z(crosshair_y_rsc_z)
    );
  mgc_in_wire #(.rscid(3),
  .width(1)) shot_attempted_rsc_mgc_in_wire (
      .d(shot_attempted_rsc_mgc_in_wire_d),
      .z(shot_attempted_rsc_z)
    );
  mgc_out_stdreg #(.rscid(4),
  .width(2)) shot_timer_rsc_mgc_out_stdreg (
      .d(shot_timer_rsc_mgc_out_stdreg_d),
      .z(shot_timer_rsc_z)
    );
  mgc_out_stdreg #(.rscid(5),
  .width(10)) target_x_out_rsc_mgc_out_stdreg (
      .d(target_x_out_rsc_mgc_out_stdreg_d),
      .z(target_x_out_rsc_z)
    );
  mgc_out_stdreg #(.rscid(6),
  .width(10)) target_y_out_rsc_mgc_out_stdreg (
      .d(10'b10100000),
      .z(target_y_out_rsc_z)
    );
  mgc_out_stdreg #(.rscid(7),
  .width(1)) target_shot_rsc_mgc_out_stdreg (
      .d(target_shot_rsc_mgc_out_stdreg_d),
      .z(target_shot_rsc_z)
    );
  mgc_out_stdreg #(.rscid(8),
  .width(10)) score_out_rsc_mgc_out_stdreg (
      .d(score_out_rsc_mgc_out_stdreg_d),
      .z(score_out_rsc_z)
    );
  mgc_out_stdreg #(.rscid(9),
  .width(2)) life_out_rsc_mgc_out_stdreg (
      .d(life_out_rsc_mgc_out_stdreg_d),
      .z(life_out_rsc_z)
    );
  ps_engine_core ps_engine_core_inst (
      .clk(clk),
      .en(en),
      .arst_n(arst_n),
      .crosshair_x_rsc_mgc_in_wire_d(crosshair_x_rsc_mgc_in_wire_d),
      .crosshair_y_rsc_mgc_in_wire_d(crosshair_y_rsc_mgc_in_wire_d),
      .shot_attempted_rsc_mgc_in_wire_d(shot_attempted_rsc_mgc_in_wire_d),
      .shot_timer_rsc_mgc_out_stdreg_d(shot_timer_rsc_mgc_out_stdreg_d),
      .target_x_out_rsc_mgc_out_stdreg_d(target_x_out_rsc_mgc_out_stdreg_d),
      .target_shot_rsc_mgc_out_stdreg_d(target_shot_rsc_mgc_out_stdreg_d),
      .score_out_rsc_mgc_out_stdreg_d(score_out_rsc_mgc_out_stdreg_d),
      .life_out_rsc_mgc_out_stdreg_d(life_out_rsc_mgc_out_stdreg_d)
    );
endmodule



